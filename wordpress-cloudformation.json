{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "WordPress single instance",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "ImageId": {
            "Type": "AWS::EC2::Image::Id",
            "Description": "AMI ID of Amazon Linux",
            "Default": "ami-60b6c60a"
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "WebServerCapacity": {
            "Default": "1",
            "Description": "The initial number of WebServer instances",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "1",
            "ConstraintDescription": "must be between 1 and 1 EC2 instances."
        },
        "DBName": {
            "Default": "wordpressdb",
            "Description": "The WordPress database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBUser": {
            "Description": "The WordPress database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "Description": "The WordPress database admin account password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters and be of length 8-41."
        },
        "DBRootPassword": {
            "Description": "MySQL root password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters and be of length 8-41."
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/16"
            },
            "Public": {
                "CIDR": "10.0.0.0/24"
            },
            "Private": {
                "CIDR": "10.0.1.0/24"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "InstanceTenancy": "default",
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "VpcGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "DependsOn": [
                "VPC",
                "InternetGateway"
            ],
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "DependsOn": [
                "VPC"
            ],
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": [
                "PublicRouteTable",
                "InternetGateway"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "DependsOn": [
                "VPC"
            ],
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Public",
                        "CIDR"
                    ]
                }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn": [
                "PublicSubnet",
                "PublicRouteTable"
            ],
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": [
                "VPC"
            ],
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "ElasticLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": [
                "VPC"
            ],
            "Properties": {
                "GroupDescription": "Security group for the WordPress load balancer",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "WebServerSecurityGroupIngress22": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": [
                "WebServerSecurityGroup"
            ],
            "Properties": {
                "GroupId": {
                    "Fn::GetAtt": [
                        "WebServerSecurityGroup",
                        "GroupId"
                    ]
                },
                "CidrIp": {
                    "Ref": "SSHLocation"
                },
                "FromPort": 22,
                "ToPort": 22,
                "IpProtocol": "tcp"
            }
        },
        "WebServerSecurityGroupIngress80": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": [
                "WebServerSecurityGroup",
                "ElasticLoadBalancerSecurityGroup"
            ],
            "Properties": {
                "GroupId": {
                    "Fn::GetAtt": [
                        "WebServerSecurityGroup",
                        "GroupId"
                    ]
                },
                "SourceSecurityGroupId": {
                    "Ref": "ElasticLoadBalancerSecurityGroup"
                },
                "FromPort": 80,
                "ToPort": 80,
                "IpProtocol": "tcp"
            }
        },
        "ElasticLoadBalancerSecurityGroupIngress80": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": [
                "ElasticLoadBalancerSecurityGroup"
            ],
            "Properties": {
                "GroupId": {
                    "Fn::GetAtt": [
                        "ElasticLoadBalancerSecurityGroup",
                        "GroupId"
                    ]
                },
                "CidrIp": "0.0.0.0/0",
                "FromPort": 80,
                "ToPort": 80,
                "IpProtocol": "tcp"
            }
        },
        "ElasticLoadBalancerSecurityGroupEgress80": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "DependsOn": [
                "ElasticLoadBalancerSecurityGroup",
                "WebServerSecurityGroup"
            ],
            "Properties": {
                "GroupId": {
                    "Fn::GetAtt": [
                        "ElasticLoadBalancerSecurityGroup",
                        "GroupId"
                    ]
                },
                "DestinationSecurityGroupId": {
                    "Ref": "WebServerSecurityGroup"
                },
                "FromPort": 80,
                "ToPort": 80,
                "IpProtocol": "tcp"
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "DependsOn": [
                "PublicSubnet",
                "ElasticLoadBalancerSecurityGroup"
            ],
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "CrossZone": "true",
                "LBCookieStickinessPolicy": [
                    {
                        "PolicyName": "CookieBasedPolicy",
                        "CookieExpirationPeriod": "30"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "CookieBasedPolicy"
                        ]
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:80/wordpress/wp-admin/install.php",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "5",
                    "Interval": "10",
                    "Timeout": "5"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ElasticLoadBalancerSecurityGroup"
                    }
                ]
            }
        },
        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": [
                "WebServerSecurityGroup",
                "VpcGatewayAttachment"
            ],
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "wordpress_install": [
                            "install_cfn",
                            "install_wordpress",
                            "configure_wordpress"
                        ]
                    },
                    "install_cfn": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource LaunchConfiguration ",
                                            "         --configsets wordpress_install ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "install_wordpress": {
                        "packages": {
                            "yum": {
                                "php": [],
                                "php-mysql": [],
                                "mysql": [],
                                "mysql-server": [],
                                "mysql-devel": [],
                                "mysql-libs": [],
                                "httpd": []
                            }
                        },
                        "sources": {
                            "/var/www/html": "http://wordpress.org/latest.tar.gz"
                        },
                        "files": {
                            "/tmp/setup.mysql": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "CREATE DATABASE ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            ";\n",
                                            "CREATE USER '",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "'@'localhost' IDENTIFIED BY '",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "';\n",
                                            "GRANT ALL ON ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            ".* TO '",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "'@'localhost';\n",
                                            "FLUSH PRIVILEGES;\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/create-wp-config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php\n",
                                            "sed -i \"s/'database_name_here'/'",
                                            {
                                                "Ref": "DBName"
                                            },
                                            "'/g\" wp-config.php\n",
                                            "sed -i \"s/'username_here'/'",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "'/g\" wp-config.php\n",
                                            "sed -i \"s/'password_here'/'",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "'/g\" wp-config.php\n"
                                        ]
                                    ]
                                },
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "mysqld": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    },
                    "configure_wordpress": {
                        "commands": {
                            "01_set_mysql_root_password": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "mysqladmin -u root password '",
                                            {
                                                "Ref": "DBRootPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$(mysql ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            " -u root --password='",
                                            {
                                                "Ref": "DBRootPassword"
                                            },
                                            "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
                                        ]
                                    ]
                                }
                            },
                            "02_create_database": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "mysql -u root --password='",
                                            {
                                                "Ref": "DBRootPassword"
                                            },
                                            "' < /tmp/setup.mysql"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$(mysql ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            " -u root --password='",
                                            {
                                                "Ref": "DBRootPassword"
                                            },
                                            "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
                                        ]
                                    ]
                                }
                            },
                            "03_configure_wordpress": {
                                "command": "/tmp/create-wp-config",
                                "cwd": "/var/www/html/wordpress"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "ImageId"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "AssociatePublicIpAddress": true,
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource LaunchConfiguration ",
                                "         --configsets wordpress_install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": [
                "PublicSubnet",
                "LaunchConfiguration",
                "ElasticLoadBalancer"
            ],
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity": {
                    "Ref": "WebServerCapacity"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        }
    }
}
